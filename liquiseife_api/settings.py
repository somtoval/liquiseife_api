"""
Django settings for liquiseife_api project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-m*35f%fir1u0y_zz%k#=@$+r=%^&py9$%0_+j6i_ulkrxo1c9z"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "api_app.apps.ApiAppConfig",
    'rest_framework',
    'corsheaders',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "liquiseife_api.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "liquiseife_api.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# 1. STATIC_URL
# Purpose: Specifies the URL to use when referring to static files in templates or using the static template tag. It's essentially the base URL to access static files.
# Example: If you set STATIC_URL = '/static/', then your static files will be accessible under this path in the browser, like http://yourdomain.com/static/yourfile.css.
STATIC_URL = "static/"


# 2. STATICFILES_DIRS
# In a development environment, Django serves static files directly from the static directories within each of your applications and any locations specified in STATICFILES_DIRS. This behavior is independent of the STATIC_ROOT setting. Django's development server is designed to automatically find and serve static files from these locations without requiring collectstatic to be run.
# So in development server, this is the location of your static files using os.path.join(BASE_DIR, 'static'). This tells Django to look for static files in the 'static' directory within your project's root directory.
# Purpose: A list of filesystem directories where Django looks for static file additions that aren't in your apps' static directories. This setting is used to add extra paths that contain static files, allowing you to serve static files that are outside of any applications' static folders.
# Example: STATICFILES_DIRS = [os.path.join(BASE_DIR, 'extra_static'),] tells Django to also look in the extra_static directory at the base of your project for static files.
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]


# 3. STATIC_ROOT
# In a production environment, serving static files directly from their development locations (e.g., scattered across various app-specific static directories and any paths specified in STATICFILES_DIRS) is inefficient and not recommended. Instead, you should collect all static files into a single location (typically a directory outside of your source code) from which they can be served efficiently by your web server. This is where STATIC_ROOT comes into play.
# With STATIC_ROOT specified: You run python manage.py collectstatic, and Django collects all static files from the app-specific static directories and STATICFILES_DIRS, then copies them into the directory specified by STATIC_ROOT. This makes it easier to serve static files in a production setup.
# Without STATIC_ROOT specified: You cannot use the collectstatic command, as Django does not know where to collect the static files. In this case, you would need to manually manage how static files are served in production, which can be cumbersome and error-prone.
# Purpose: The absolute path to the directory where collectstatic will collect static files for deployment. When you run manage.py collectstatic, Django looks for all static files in your apps and any additional paths specified in STATICFILES_DIRS, and then it copies them into STATIC_ROOT.
# Example: STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') means collectstatic will collect static files and put them into a folder named staticfiles at the base of your project.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# 4. MEDIA_URL
# This is used to define the base URL for media files in both development and deployment. In development, it helps Django construct the URL patterns to serve user-uploaded files directly from the MEDIA_ROOT directory through the development server. It's essential for generating correct URLs in your templates or views, even when you're just running your project locally
# In a production environment, this setting continues to define how the URLs for media files are constructed. However, serving these files directly with Django (like in development) is not efficient or secure. Instead, you configure your web server (e.g., Nginx or Apache) to serve media files directly from the MEDIA_ROOT location using the MEDIA_URL path as the URL prefix.
# Purpose: The URL to use when referring to media files (uploaded by users) in templates. Like STATIC_URL, it's the base URL for accessing user-uploaded files.
# Example: If MEDIA_URL = '/media/', user-uploaded files will be accessible under this path, like http://yourdomain.com/media/youruploadedfile.jpg.
MEDIA_URL = '/productImages/'

# 5. MEDIA_ROOT
# It specifies the local file system path where uploaded files are stored. In development, Django uses this path to save files uploaded through forms and to serve them when requested, mimicking how media files would be handled in a production environment but without the efficiency or security optimizations.
# While the purpose of MEDIA_ROOT remains the same in production—to define where uploaded files are stored—the handling differs. You typically set up your production environment so that this directory is served directly by your web server, bypassing Django for faster, more secure access to media files.
# Purpose: The absolute path to the directory where files uploaded using FileField or ImageField are stored. Unlike static files, media files are managed by users through your application.
# Example: MEDIA_ROOT = os.path.join(BASE_DIR, 'media') specifies that user-uploaded files should be stored in a folder named media at the base of your project.
MEDIA_ROOT = os.path.join(BASE_DIR, '/uploaded_stuffs/')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
